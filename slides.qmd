---
title: "Dependency management in R and python"
author: "Flavio Hafner"
date: 01/30/2025
format: revealjs
editor: visual
---

## Why track dependencies

- You want that your code still runs in 2 years
  - Your dependencies' functionality may change; ther may be bug fixes
- One project may lock the version for a specific package
  - But you may want to use newer versions where possible in other projects
- Make your tools portable
  - For yourself
  - For your co-authors

<!-- do not want to install each package separately, try if the code runs, and repeat -->

## The high-level idea

| DIY Project | R/python Project |
|------------------------------------|------------------------------------|
| 🏪 Hardware store | Repository (CRAN, PyPI) |
| 🗄 The storage shelf in your garage | The folder with python/R libraries |
| 🧰 Toolboxes (the drill box, the box of screwdrivers) | Packages (ggplot2, etc.) |
| 🪑 Workbench | Environment: `renv`, `venv` |


## The environment is an isolated workspace with all tools

- An environment is defined by a file with metadata on
  - Which packages
  - Which versions
  - From where (repository, github)
- Metadata are stored in requirements and lock files
  - They allow anyone to recreate the dependencies in the same way
- The metadata should be under version control
  - So that you can track changes and share with others


::: {.section .transition-slide}
# R: Using `renv`
:::

## Create a new project in RStudio

1. Install `renv` globally with 

```R
install.packages("renv")
```

2. Create new project with version control (git)\
    (File -\> New Project -\> Version Control -\> Git)
3. Open the project in a new session




## Install and track packages with `renv`

4. Attach `renv` to your R session with 
```R
library(renv)
```
5. Initialize the renv
```R
renv::init(bare = TRUE)
```

This creates  TODO: show in steps

- `renv/` -- A new folder that serves as the **library** of packages for your project.
- `.Rprofile` -- This file makes sure that once `renv` is turned on for a project, it stays on.

<!-- 6. Check that R looks for packages in the right place: -->
<!-- ```{r, echo=TRUE} -->
<!-- .libPaths()[1] -->
<!-- ``` -->


## Create lock file to log project state

```R
renv::snapshot()
```

yields something like

```json
{
  "R": {
    "Version": "4.4.2",
    "Repositories": [
      {
        "Name": "CRAN",
        "URL": "https://cloud.r-project.org"
      }
    ]
  },
  "Packages": {
      "rlang": {
      "Package": "rlang",
      "Version": "1.1.4",
      "Source": "Repository",
      "Repository": "CRAN",
      "Requirements": [
        "R",
        "utils"
      ],
      "Hash": "3eec01f8b1dee337674b2e34ab1f9bc1"
    }
  }
}
```


## The lock file only records dependencies only when used in scripts: 

1. Install new packages with 
```R
renv::install(dplyr)
```

2. Use it in a script
```R
library(dplyr) # or require(dplyr)
```

3. Update lock file
```R
renv::snapshot()
```

## Restoring and checking

![Source: rstudio.github.io](renv.png){width=50%}





::: {.section .transition-slide}
# Python: Using `venv` and `pip`
:::







## Python: using `venv` and `pip`

- Is it possible to do it without the command line?


## Odds and ends

- I suggest to have the environment inside your project directory
- Adding dependencies is always a make-or-buy decision
  - Don't reinvent the wheel? 
- Before adding dependencies, it's good to
  - Consider different tools for the task 
  - Does it work as intended?
  - Check if they are maintained and the size of the user base
- Be aware of security risks


## References & further reading

For R:

- [TSB Research Support Team: Intermediate R](https://gitlab.uvt.nl/tsb-rst/intermediate-level-r-course-for-social-sciences)
- [Introduction to renv](https://rstudio.github.io/renv/articles/renv.html)

For Python:

- [Code refinery: Reproducible environments and dependencies](https://coderefinery.github.io/python-progression/dependencies/)
- [Intermediate Research Software Development with Python: virtual environments](https://carpentries-incubator.github.io/python-intermediate-development/12-virtual-environments.html)

## Exercises

- Start using an environment for an existing project
- If you're using python `venv`, give `uv` a shot

